<?xml version="1.0" encoding="utf-8"?>
<!-- XSL transformation to expand/replace TeX macros in Biber-generated bltxml file

Andrew A. Cashner, 2022/09

Input is a bltxml file generated by Biber from a BibLaTeX source, which can still include some TeX macros.
Do a basic replacement of these TeX macros , e.g., \makebibemph{} or {Title text}.
-->
<xsl:stylesheet
  version="2.0"
  xmlns="http://www.w3.org/1999/xhtml" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:aac="https://www.senecasongs.earth"
  exclude-result-prefixes="aac">

  <!-- replace TeX macros everywhere 
        (no promise of support for complex or nested TeX constructions) -->
  <xsl:template name="macros">
    <xsl:variable name="lettered">
      <xsl:value-of select="aac:tex-letter-macros(string())" />
    </xsl:variable>
    <xsl:variable name="quoted">
      <xsl:call-template name="expand-mkbibquote">
        <xsl:with-param name="string" select="$lettered" />
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="emphasized">
      <xsl:call-template name="expand-mkbibemph">
        <xsl:with-param name="string" select="$quoted" />
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="parenthesized">
      <xsl:call-template name="expand-mkbibparens">
        <xsl:with-param name="string" select="$emphasized" />
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="debraced">
      <xsl:call-template name="remove-tex-braces">
        <xsl:with-param name="string" select="$parenthesized" />
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="deslashed">
      <xsl:call-template name="remove-tex-backslashes">
        <xsl:with-param name="string" select="$debraced" />
      </xsl:call-template>
    </xsl:variable>
    <xsl:copy-of select="$deslashed" />
  </xsl:template>

  <!-- TeX letter macros: apostrophe, dashes -->
  <xsl:function name="aac:tex-letter-macros">
    <xsl:param name="string" />
    <xsl:value-of select="aac:tex-em-dashes(aac:tex-en-dashes(aac:tex-apostrophes($string)))" />
  </xsl:function>

  <xsl:function name="aac:tex-apostrophes">
    <xsl:param name="string" />
    <xsl:value-of select="replace($string, '''', '’')" />
  </xsl:function>

  <xsl:function name="aac:tex-en-dashes">
    <xsl:param name="string" />
    <xsl:value-of select="replace($string, '--', '–')" />
  </xsl:function>

  <xsl:function name="aac:tex-em-dashes">
    <xsl:param name="string" />
    <xsl:value-of select="replace($string, '---', '—')" />
  </xsl:function>

  <!-- regular expression for TeX argument delimited by curly-braces -->
  <xsl:variable name="within-braces">\{([^\}]*)\}</xsl:variable>

  <!-- BibLaTeX-specific commands `\mkbibquote`, `\mkbibemph`, and `\mkbibparens` -->
  <xsl:template name="expand-mkbibquote">
    <xsl:param name="string" />
    <xsl:analyze-string select="$string" regex="(.*)\\mkbibquote{$within-braces}(.*)"> 
      <xsl:matching-substring>
        <xsl:value-of select="regex-group(1)" />
        <q><xsl:value-of select="regex-group(2)" /></q>
        <xsl:value-of select="regex-group(3)" />
      </xsl:matching-substring>
      <xsl:non-matching-substring>
        <xsl:copy-of select="$string" />
      </xsl:non-matching-substring>
    </xsl:analyze-string>
  </xsl:template>

  <xsl:template name="expand-mkbibemph">
    <xsl:param name="string" />
    <xsl:analyze-string select="$string" regex="(.*)\\mkbibemph{$within-braces}(.*)">
      <xsl:matching-substring>
        <xsl:value-of select="regex-group(1)" />
        <em><xsl:value-of select="regex-group(2)" /></em>
        <xsl:value-of select="regex-group(3)" />
      </xsl:matching-substring>
      <xsl:non-matching-substring>
        <xsl:copy-of select="$string" />
      </xsl:non-matching-substring>
    </xsl:analyze-string>
  </xsl:template>

  <xsl:template name="expand-mkbibparens">
    <xsl:param name="string" />
    <xsl:analyze-string select="$string" regex="(.*)\\mkbibparens{$within-braces}(.*)">
      <xsl:matching-substring>
        <xsl:value-of select="regex-group(1)" />
        <xsl:text>(</xsl:text>
        <xsl:value-of select="regex-group(2)" />
        <xsl:text>)</xsl:text>
        <xsl:value-of select="regex-group(3)" />
      </xsl:matching-substring>
      <xsl:non-matching-substring>
        <xsl:copy-of select="$string" />
      </xsl:non-matching-substring>
    </xsl:analyze-string>
  </xsl:template>

  <!-- remove any remaining pairs of curly braces -->
  <xsl:template name="remove-tex-braces">
    <xsl:param name="string" />
    <xsl:analyze-string select="$string" regex="(.*){$within-braces}(.*)">
      <xsl:matching-substring>
        <xsl:value-of select="regex-group(1)" />
        <xsl:value-of select="regex-group(2)" />
        <xsl:value-of select="regex-group(3)" />
      </xsl:matching-substring>
      <xsl:non-matching-substring>
        <xsl:copy-of select="$string" />
      </xsl:non-matching-substring>
    </xsl:analyze-string>
  </xsl:template>

  <!-- remove any remaining backslashes -->
  <xsl:template name="remove-tex-backslashes">
    <xsl:param name="string" />
    <xsl:analyze-string select="$string" regex="(.*)\\(.*)">
      <xsl:matching-substring>
        <xsl:value-of select="regex-group(1)" />
        <xsl:value-of select="regex-group(2)" />
      </xsl:matching-substring>
      <xsl:non-matching-substring>
        <xsl:copy-of select="$string" />
      </xsl:non-matching-substring>
    </xsl:analyze-string>
  </xsl:template>

</xsl:stylesheet>
